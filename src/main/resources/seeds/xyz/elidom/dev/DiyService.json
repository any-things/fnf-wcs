[
        {
                "id": "5b785e45-d00b-451d-bab7-d6e33ef13db6",
                "name": "rtn_scantype_validater",
                "description": "반품 스캔 유형별 스캔바코드 유효성 체크",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false
        },
        {
                "id": "2792b8a6-f391-422e-8a26-76d3523dad61",
                "name": "rtn_scantype_finder",
                "description": "반품 화면에서 스캔한 정보가 어떤 유형의 바코드 인지 체크",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "def len = inputId == null ? 0 : inputId.length();\r\n\r\nif(len == 0) {\r\n\treturn null;\r\n} else if(len == 3) {\r\n\t// 모두 숫자 이면 슈트 번호 - TODO 정규 표현식 체크 \r\n\treturn 'CHUTE_NO';\r\n} else if(len == 9) {\r\n\t// M100-0101 형식이면 로케이션 코드 - TODO 정규 표현식 체크\r\n\treturn 'LOC_CD';\r\n} else if(len == 13 || len == 14) {\r\n\t// 모두 숫자이면 상품 바코드 - TODO 정규 표현식 체크 \r\n\treturn 'SKU_CD';\r\n} else if(len == 16) {\r\n\tif(inputId.startsWith('A') || inputId.startsWith('B') || inputId.startsWith('9')) {\r\n\t\t// TODO 정규 표현식 체크 - 6자리 부터 마지막 자리까지 모두 숫자 \r\n\t\treturn 'BOX_ID';\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n} else {\r\n\treturn null;\r\n}"
        },
        {
                "id": "d3d79274-bb04-45a7-8ae3-5acdc62d2a9c",
                "name": "rtn3_scantype_validater",
                "description": "반품 스캔 유형별 스캔바코드 유효성 체크",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false
        },
        {
                "id": "5b876a71-12c0-4d13-9109-2f92cecd0550",
                "name": "rtn3_scantype_finder",
                "description": "반품 화면에서 스캔한 정보가 어떤 유형의 바코드 인지 체크",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "def len = inputId == null ? 0 : inputId.length();\r\n\r\nif(len == 0) {\r\n\treturn null;\r\n} else if(len == 3) {\r\n\t// 모두 숫자 이면 슈트 번호 - TODO 정규 표현식 체크 \r\n\treturn 'CHUTE_NO';\r\n} else if(len == 9) {\r\n\t// M100-0101 형식이면 로케이션 코드 - TODO 정규 표현식 체크\r\n\treturn 'LOC_CD';\r\n} else if(len == 13 || len == 14) {\r\n\t// 모두 숫자이면 상품 바코드 - TODO 정규 표현식 체크 \r\n\treturn 'SKU_CD';\r\n} else if(len == 16) {\r\n\tif(inputId.startsWith('ALEVB') || inputId.startsWith('A PMB') || inputId.startsWith('A MEB')) {\r\n\t\t// TODO 정규 표현식 체크 - 6자리 부터 마지막 자리까지 모두 숫자 \r\n\t\treturn 'BOX_ID';\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n} else {\r\n\treturn null;\r\n}"
        },
        {
                "id": "329b727f-0fa0-4cc1-b85b-02103b3033dc",
                "name": "rtn3-cell-display-boxid",
                "description": "무오더 반품 로케이션에 매핑한 공박스를 표시할 번호",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "def displayBoxId = (boxId.length() >= 3) ? boxId.substring(boxId.length() - 3, boxId.length()) : boxId;\r\nreturn displayBoxId;"
        },
        {
                "id": "a2977078-7e90-49bc-bf49-9790ea1e14d9",
                "name": "rtn2_scantype_finder",
                "description": "반품 화면에서 스캔한 정보가 어떤 유형의 바코드 인지 체크",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "def len = inputId == null ? 0 : inputId.length();\r\n\r\nif(len == 0) {\r\n\treturn null;\r\n} else if(len == 3) {\r\n\t// 모두 숫자 이면 슈트 번호 - TODO 정규 표현식 체크 \r\n\treturn 'CHUTE_NO';\r\n} else if(len == 9) {\r\n\t// M100-0101 형식이면 로케이션 코드 - TODO 정규 표현식 체크\r\n\treturn 'LOC_CD';\r\n} else if(len == 13 || len == 14) {\r\n\t// 모두 숫자이면 상품 바코드 - TODO 정규 표현식 체크 \r\n\treturn 'SKU_CD';\r\n} else if(len == 16) {\r\n\tif(inputId.startsWith('A') || inputId.startsWith('B') || inputId.startsWith('9') || inputId.startsWith('BMLKL')) {\r\n\t\t// TODO 정규 표현식 체크 - 6자리 부터 마지막 자리까지 모두 숫자 \r\n\t\treturn 'BOX_ID';\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n} else {\r\n\treturn null;\r\n}"
        },
        {
                "id": "81e18489-a607-4572-b0ce-678795ab0833",
                "name": "rtn2-check-loc-mapping-boxid",
                "description": "반품 로케이션 매핑할 박스 ID 체크",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "def valid = (boxId != null && boxId.length() == 16) ? true : false;\r\nreturn valid;"
        },
        {
                "id": "e3eaa96d-c2c5-402c-af2e-1982d36ed15a",
                "name": "rtn2-cell-display-boxid",
                "description": "반품 2차 분류 로케이션에 매핑한 공박스를 표시할 번호",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "def displayBoxId = (boxId.length() >= 3) ? boxId.substring(boxId.length() - 3, boxId.length()) : boxId;\r\nreturn displayBoxId;"
        },
        {
                "id": "58673188-aea3-4e87-a246-732e134f1aea",
                "name": "dps2-check-loc-mapping-boxid",
                "description": "B2C 로케이션에 매핑할 박스 ID 체크",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "def valid = (boxId == null || (!boxId.startsWith('A PMC') && !boxId.startsWith('ALEVC') && !boxId.startsWith('A MEC')) || boxId.length() != 16) ? false : true;\r\nreturn valid;"
        },
        {
                "id": "8f6c0297-6712-4b7e-819a-cbfad8e9f011",
                "name": "dps2-cell-display-boxid",
                "description": "DPS 2차 분류 로케이션에 매핑한 공박스를 표시할 번호",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "java.lang.String bId = \"$boxId\";\r\njava.lang.String displayBoxId = (bId.length() >= 3) ? bId.substring(bId.length() - 3, bId.length()) : bId;\r\nreturn displayBoxId;"
        },
        {
                "id": "f1bd9f60-abb0-4156-82cb-437a5420242d",
                "name": "das-before-preprocess-action",
                "description": "DAS 주문 가공 전 커스터마이징 액션",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false
        },
        {
                "id": "c4a2e27b-27af-4a00-9447-9ffe174a79dd",
                "name": "das-after-preprocess-action",
                "description": "DAS 주문 가공 후 커스터마이징 액션",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "import com.cj.mps3.entity.JobOrder;\nimport java.util.*;\nimport xyz.elidom.sys.util.ValueUtil;\nimport xyz.elidom.exception.server.ElidomValidationException;\n\ndef sql = \"\"\"\n\tselect com_cd, cust_cd from (\n\t\tselect\n\t\t\tcom_cd, cust_cd, count(1) as cnt\n\t\tfrom (\n\t\t\tselect\n\t\t\t\tdistinct com_cd, cust_cd, order_group\n\t\t\tfrom\n\t\t\t\ttb_if_order\n\t\t\twhere\n\t\t\t\tdomain_id = ${domainId}\n\t\t\t\tand batch_id = '${batch.id}')\n\t\tgroup by\n\t\t\tcom_cd, cust_cd\n\t) where \n\t\tcnt > 1\n\"\"\"\n\nqueryDsl.init('com.cj.mps3.entity.JobOrder');\ndef dupList = queryDsl.selectSql(sql.toString(), 0, 0);\n\nif(ValueUtil.isNotEmpty(dupList)) {\n\tdef dupData = dupList[0];\n\tdef comCd = dupData['com_cd'];\n\tdef custCd = dupData['cust_cd'];\n\tthrow new ElidomValidationException(\"차량 중복 : 고객사 ${comCd}, 거래처 ${custCd}\");\n} else {\n\treturn true;\n}"
        },
        {
                "id": "57976be7-fcc3-4046-8e70-ed1427196b9e",
                "name": "das-after-instruction-action",
                "description": "DAS 작업 지시 후 커스터마이징 액션",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false
        },
        {
                "id": "fe3fd897-1673-493f-80ae-313b2838cbe0",
                "name": "after-receive-order-by-batch",
                "description": "주문 정보를 수신한 후 액션 처리",
                "category": "EVENT",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "import com.cj.mps3.entity.JobOrder;\nimport java.util.HashMap;\n\ndef sql = \"\"\"\n\tupdate \n\t\ttb_if_order o\n\tset \n\t\to.order_group = nvl2(o.order_group, decode(o.order_group, 'UNKNOWN', o.pass_stop_cd, o.vehicle_no), decode(o.vehicle_no, 'UNKNOWN', o.pass_stop_cd, o.vehicle_no))\n\t\t, o.pack_type = (\n\t\t\t\tselect \n\t\t\t\t\tlbl_val1 \n                 from \n                \ttb_if_order_label\n                 where   \n                \tif_order_id = o.id)\n\twhere\n\t\to.domain_id = ${domainId}\n\t\tand o.batch_id = '${batchId}'\n\"\"\"\n\nqueryDsl.init('com.cj.mps3.entity.JobOrder');\nreturn queryDsl.executeSql(sql.toString(), new HashMap());"
        },
        {
                "id": "d7b8b201-a6a7-44a1-b101-a641347ca27b",
                "name": "wcs_minutely_result",
                "description": "WCS 10분대별 실적",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\r\n\tA.MINUTES,\r\n\tA.RESULT_QTY\r\nFROM (\r\n\tSELECT\r\n\t\tJOB_HOUR AS HOUR,\r\n\t\tJOB_HOUR || ':00' AS MINUTES,\r\n\t\tCOALESCE(SUM(M10_RESULT), 0) AS RESULT_QTY\r\n\tFROM\r\n\t\tPRODUCTIVITY\r\n\tWHERE\r\n\t\tDOMAIN_ID = :domain_id\r\n\t\t#if($job_date)\r\n\t\tAND JOB_DATE >= :job_date\r\n\t\t#end\r\n\t\t#if($area_cd)\r\n\t\tAND AREA_CD = :area_cd\r\n\t\t#end\r\n\t\t#if($stage_cd)\r\n\t\tAND STAGE_CD = :stage_cd\r\n\t\t#end\r\n\t\t#if($equip_type)\r\n\t\tAND EQUIP_TYPE = :equip_type\r\n\t\t#end\r\n\t\t#if($equip_cd)\r\n\t\tAND EQUIP_CD = :equip_cd\r\n\t\t#end\r\n\t\t#if($job_type)\r\n\t\tAND JOB_TYPE = :job_type\r\n\t\t#end\r\n\t\t#if($attr01)\r\n\t\tAND ATTR01 = :attr01\r\n\t\t#end\r\n\t\t#if($attr02)\r\n\t\tAND ATTR02 = :attr02\r\n\t\t#end\r\n\t\t#if($station_cd)\r\n\t\tAND STATION_CD = :station_cd\r\n\t\t#end\r\n\tGROUP BY\r\n    \tJOB_HOUR\r\n    \t\r\n\tUNION ALL\r\n\t\r\n\tSELECT\r\n\t\tJOB_HOUR AS HOUR,\r\n\t\tJOB_HOUR || ':10' AS MINUTES,\r\n\t\tCOALESCE(SUM(M20_RESULT), 0) AS RESULT_QTY\r\n\tFROM\r\n\t\tPRODUCTIVITY\r\n\tWHERE\r\n\t\tDOMAIN_ID = :domain_id\r\n\t\t#if($job_date)\r\n\t\tAND JOB_DATE >= :job_date\r\n\t\t#end\r\n\t\t#if($area_cd)\r\n\t\tAND AREA_CD = :area_cd\r\n\t\t#end\r\n\t\t#if($stage_cd)\r\n\t\tAND STAGE_CD = :stage_cd\r\n\t\t#end\r\n\t\t#if($equip_type)\r\n\t\tAND EQUIP_TYPE = :equip_type\r\n\t\t#end\r\n\t\t#if($equip_cd)\r\n\t\tAND EQUIP_CD = :equip_cd\r\n\t\t#end\r\n\t\t#if($job_type)\r\n\t\tAND JOB_TYPE = :job_type\r\n\t\t#end\r\n\t\t#if($attr01)\r\n\t\tAND ATTR01 = :attr01\r\n\t\t#end\r\n\t\t#if($attr02)\r\n\t\tAND ATTR02 = :attr02\r\n\t\t#end\r\n\t\t#if($station_cd)\r\n\t\tAND STATION_CD = :station_cd\r\n\t\t#end\r\n\tGROUP BY\r\n    \tJOB_HOUR\r\n    \t\r\n\tUNION ALL\r\n\t\r\n\tSELECT\r\n\t\tJOB_HOUR AS HOUR,\r\n\t\tJOB_HOUR || ':20' AS MINUTES,\r\n\t\tCOALESCE(SUM(M30_RESULT), 0) AS RESULT_QTY\r\n\tFROM\r\n\t\tPRODUCTIVITY\r\n\tWHERE\r\n\t\tDOMAIN_ID = :domain_id\r\n\t\t#if($job_date)\r\n\t\tAND JOB_DATE >= :job_date\r\n\t\t#end\r\n\t\t#if($area_cd)\r\n\t\tAND AREA_CD = :area_cd\r\n\t\t#end\r\n\t\t#if($stage_cd)\r\n\t\tAND STAGE_CD = :stage_cd\r\n\t\t#end\r\n\t\t#if($equip_type)\r\n\t\tAND EQUIP_TYPE = :equip_type\r\n\t\t#end\r\n\t\t#if($equip_cd)\r\n\t\tAND EQUIP_CD = :equip_cd\r\n\t\t#end\r\n\t\t#if($job_type)\r\n\t\tAND JOB_TYPE = :job_type\r\n\t\t#end\r\n\t\t#if($attr01)\r\n\t\tAND ATTR01 = :attr01\r\n\t\t#end\r\n\t\t#if($attr02)\r\n\t\tAND ATTR02 = :attr02\r\n\t\t#end\r\n\t\t#if($station_cd)\r\n\t\tAND STATION_CD = :station_cd\r\n\t\t#end\r\n\tGROUP BY\r\n    \tJOB_HOUR\r\n    \t\r\n\tUNION ALL\r\n\t\r\n\tSELECT\r\n\t\tJOB_HOUR AS HOUR,\r\n\t\tJOB_HOUR || ':30' AS MINUTES,\r\n\t\tCOALESCE(SUM(M40_RESULT), 0) AS RESULT_QTY\r\n\tFROM\r\n\t\tPRODUCTIVITY\r\n\tWHERE\r\n\t\tDOMAIN_ID = :domain_id\r\n\t\t#if($job_date)\r\n\t\tAND JOB_DATE >= :job_date\r\n\t\t#end\r\n\t\t#if($area_cd)\r\n\t\tAND AREA_CD = :area_cd\r\n\t\t#end\r\n\t\t#if($stage_cd)\r\n\t\tAND STAGE_CD = :stage_cd\r\n\t\t#end\r\n\t\t#if($equip_type)\r\n\t\tAND EQUIP_TYPE = :equip_type\r\n\t\t#end\r\n\t\t#if($equip_cd)\r\n\t\tAND EQUIP_CD = :equip_cd\r\n\t\t#end\r\n\t\t#if($job_type)\r\n\t\tAND JOB_TYPE = :job_type\r\n\t\t#end\r\n\t\t#if($attr01)\r\n\t\tAND ATTR01 = :attr01\r\n\t\t#end\r\n\t\t#if($attr02)\r\n\t\tAND ATTR02 = :attr02\r\n\t\t#end\r\n\t\t#if($station_cd)\r\n\t\tAND STATION_CD = :station_cd\r\n\t\t#end\r\n\tGROUP BY\r\n    \tJOB_HOUR\r\n    \t\r\n    \t\r\n\tUNION ALL\r\n\t\r\n\tSELECT\r\n\t\tJOB_HOUR AS HOUR,\r\n\t\tJOB_HOUR || ':40' AS MINUTES,\r\n\t\tCOALESCE(SUM(M50_RESULT), 0) AS RESULT_QTY\r\n\tFROM\r\n\t\tPRODUCTIVITY\r\n\tWHERE\r\n\t\tDOMAIN_ID = :domain_id\r\n\t\t#if($job_date)\r\n\t\tAND JOB_DATE >= :job_date\r\n\t\t#end\r\n\t\t#if($area_cd)\r\n\t\tAND AREA_CD = :area_cd\r\n\t\t#end\r\n\t\t#if($stage_cd)\r\n\t\tAND STAGE_CD = :stage_cd\r\n\t\t#end\r\n\t\t#if($equip_type)\r\n\t\tAND EQUIP_TYPE = :equip_type\r\n\t\t#end\r\n\t\t#if($equip_cd)\r\n\t\tAND EQUIP_CD = :equip_cd\r\n\t\t#end\r\n\t\t#if($job_type)\r\n\t\tAND JOB_TYPE = :job_type\r\n\t\t#end\r\n\t\t#if($attr01)\r\n\t\tAND ATTR01 = :attr01\r\n\t\t#end\r\n\t\t#if($attr02)\r\n\t\tAND ATTR02 = :attr02\r\n\t\t#end\r\n\t\t#if($station_cd)\r\n\t\tAND STATION_CD = :station_cd\r\n\t\t#end\r\n\tGROUP BY\r\n    \tJOB_HOUR\r\n    \t\r\n\tUNION ALL\r\n\t\r\n\tSELECT\r\n\t\tJOB_HOUR AS HOUR,\r\n\t\tJOB_HOUR || ':50' AS MINUTES,\r\n\t\tCOALESCE(SUM(M60_RESULT), 0) AS RESULT_QTY\r\n\tFROM\r\n\t\tPRODUCTIVITY\r\n\tWHERE\r\n\t\tDOMAIN_ID = :domain_id\r\n\t\t#if($job_date)\r\n\t\tAND JOB_DATE >= :job_date\r\n\t\t#end\r\n\t\t#if($area_cd)\r\n\t\tAND AREA_CD = :area_cd\r\n\t\t#end\r\n\t\t#if($stage_cd)\r\n\t\tAND STAGE_CD = :stage_cd\r\n\t\t#end\r\n\t\t#if($equip_type)\r\n\t\tAND EQUIP_TYPE = :equip_type\r\n\t\t#end\r\n\t\t#if($equip_cd)\r\n\t\tAND EQUIP_CD = :equip_cd\r\n\t\t#end\r\n\t\t#if($job_type)\r\n\t\tAND JOB_TYPE = :job_type\r\n\t\t#end\r\n\t\t#if($attr01)\r\n\t\tAND ATTR01 = :attr01\r\n\t\t#end\r\n\t\t#if($attr02)\r\n\t\tAND ATTR02 = :attr02\r\n\t\t#end\r\n\t\t#if($station_cd)\r\n\t\tAND STATION_CD = :station_cd\r\n\t\t#end\r\n\tGROUP BY\r\n    \tJOB_HOUR\r\n) A \r\nORDER BY\r\n\tA.MINUTES ASC"
        },
        {
                "id": "57d7f87c-45a0-4704-94b1-df6d56bd1548",
                "name": "wcs_yearly_result",
                "description": "WCS 월별 실적 비교",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "/*SELECT\r\n\tYEAR, \r\n\tMONTH,\r\n    YEAR || '-' || MONTH AS YEAR_MONTH, \r\n    SUM(PLAN_QTY) AS PLAN_QTY,\r\n    SUM(RESULT_QTY) AS RESULT_QTY\r\nFROM \r\n    DAILY_PROD_SUMMARY\r\nWHERE \r\n\tDOMAIN_ID = :domain_id\r\n\t#if($fromDate)\r\n\tAND JOB_DATE >= :fromDate\r\n\t#end\r\n\t#if($toDate)\r\n\tAND JOB_DATE <= :toDate\r\n\t#end\r\n\t#if($area_cd)\r\n\tAND AREA_CD = :area_cd\r\n\t#end\r\n\t#if($stage_cd)\r\n\tAND STAGE_CD = :stage_cd\r\n\t#end\r\n\t#if($equip_type)\r\n\tAND EQUIP_TYPE = :equip_type\r\n\t#end\r\n\t#if($equip_cd)\r\n\tAND EQUIP_CD = :equip_cd\r\n\t#end\r\n\t#if($job_type)\r\n\tAND JOB_TYPE = :job_type\r\n\t#end\r\n\t#if($attr01)\r\n\tAND ATTR01 = :attr01\r\n\t#end\r\n\t#if($attr02)\r\n\tAND ATTR02 = :attr02\r\n\t#end\r\n\t#if($station_cd)\r\n\tAND STATION_CD = :station_cd\r\n\t#end\r\nGROUP BY\r\n    YEAR, MONTH\r\nORDER BY\r\n    YEAR, MONTH*/\r\n\r\nreturn [\r\n\tchart: [\r\n\t\tlabels : ['4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월', '1월', '2월', '3월'],\r\n\t\tdatasets : [\r\n\t\t\t[\r\n\t\t\t\tlabel: '이전 1년', \r\n\t\t\t\tborderWidth: 1,\r\n            \tbackgroundColor: 'rgba(75,192,192,0.6)',\r\n            \tborderColor: 'rgba(75,192,192,1)',\r\n            \tdata: [535152, 395134, 242024, 224522, 274016, 292910, 386382, 252806, 210057, 237209, 262499, 415642]\r\n\t\t\t],\r\n\t\t\t[\r\n\t\t\t\tlabel: '최근 1년', \r\n\t\t\t\tborderWidth: 1,\r\n            \tbackgroundColor: 'rgba(255,99,132,0.6)',\r\n            \tborderColor: 'rgba(255,99,132,1)',\r\n            \tdata: [442944, 545991, 339274, 267350, 363584, 483982, 496721, 471463, 340196, 493782, 439502, 610394]\r\n\t\t\t]\r\n\t\t]\r\n\t],\r\n\titems : [\r\n\t\t[year : '이전 1년', m01 : 535152, m02 : 395134, m03: 242024, m04: 224522, m05: 274016, m06: 292910, m07: 386382, m08: 252806, m09: 210057, m10: 237209, m11: 262499, m12: 415642],\r\n\t\t[year : '최근 1년', m01 : 442944, m02 : 545991, m03: 339274, m04: 267350, m05: 363584, m06: 483982, m07: 496721, m08: 471463, m09: 340196, m10: 493782, m11: 439502, m12: 610394]\r\n\t]\r\n];"
        },
        {
                "id": "22cc24f4-0b00-4ae9-bca3-ab6cfc0d040a",
                "name": "wcs_monthly_result",
                "description": "WCS 월별 실적",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT \t\r\n    YEAR || '-' || MONTH AS MONTH, \r\n    SUM(PLAN_QTY) AS PLAN_QTY,\r\n    SUM(RESULT_QTY) AS RESULT_QTY\r\nFROM \r\n    DAILY_PROD_SUMMARY\r\nWHERE \r\n\tDOMAIN_ID = :domain_id\r\n\t#if($fromDate)\r\n\tAND JOB_DATE >= :fromDate\r\n\t#end\r\n\t#if($toDate)\r\n\tAND JOB_DATE <= :toDate\r\n\t#end\r\n\t#if($area_cd)\r\n\tAND AREA_CD = :area_cd\r\n\t#end\r\n\t#if($stage_cd)\r\n\tAND STAGE_CD = :stage_cd\r\n\t#end\r\n\t#if($equip_type)\r\n\tAND EQUIP_TYPE = :equip_type\r\n\t#end\r\n\t#if($equip_cd)\r\n\tAND EQUIP_CD = :equip_cd\r\n\t#end\r\n\t#if($job_type)\r\n\tAND JOB_TYPE = :job_type\r\n\t#end\r\n\t#if($attr01)\r\n\tAND ATTR01 = :attr01\r\n\t#end\r\n\t#if($attr02)\r\n\tAND ATTR02 = :attr02\r\n\t#end\r\n\t#if($station_cd)\r\n\tAND STATION_CD = :station_cd\r\n\t#end\r\nGROUP BY\r\n    YEAR, MONTH\r\nORDER BY\r\n    YEAR, MONTH"
        },
        {
                "id": "df4bb20b-89b7-4259-a407-864ed100a5ff",
                "name": "wcs_job_status",
                "description": "WCS 작업 진행 현황",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false
        },
        {
                "id": "02a263a6-d743-4e8d-9806-28bb9c1f1fa1",
                "name": "wcs_hourly_result",
                "description": "WCS 시간대별 실적",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "\tSELECT\r\n\t\tJOB_HOUR AS HOUR, \r\n\t\tCOALESCE(SUM(M10_RESULT), 0) + COALESCE(SUM(M20_RESULT), 0) + COALESCE(SUM(M30_RESULT), 0) + COALESCE(SUM(M40_RESULT), 0) + COALESCE(SUM(M50_RESULT), 0)  + COALESCE(SUM(M60_RESULT), 0) AS RESULT_QTY\r\n\tFROM\r\n\t\tPRODUCTIVITY\r\n\tWHERE\r\n\t\tDOMAIN_ID = :domain_id\r\n\t\t#if($job_date)\r\n\t\tAND JOB_DATE >= :job_date\r\n\t\t#end\r\n\t\t#if($area_cd)\r\n\t\tAND AREA_CD = :area_cd\r\n\t\t#end\r\n\t\t#if($stage_cd)\r\n\t\tAND STAGE_CD = :stage_cd\r\n\t\t#end\r\n\t\t#if($equip_type)\r\n\t\tAND EQUIP_TYPE = :equip_type\r\n\t\t#end\r\n\t\t#if($equip_cd)\r\n\t\tAND EQUIP_CD = :equip_cd\r\n\t\t#end\r\n\t\t#if($job_type)\r\n\t\tAND JOB_TYPE = :job_type\r\n\t\t#end\r\n\t\t#if($attr01)\r\n\t\tAND ATTR01 = :attr01\r\n\t\t#end\r\n\t\t#if($attr02)\r\n\t\tAND ATTR02 = :attr02\r\n\t\t#end\r\n\t\t#if($station_cd)\r\n\t\tAND STATION_CD = :station_cd\r\n\t\t#end\r\n\tGROUP BY\r\n\t\tJOB_HOUR\r\n\tORDER BY\r\n\t\tJOB_HOUR ASC"
        },
        {
                "id": "a3d3c4b6-fb34-4c0c-819d-4ab376d0f26e",
                "name": "wcs_daily_result",
                "description": "WCS 일별 실적",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT \t\r\n    JOB_DATE,\r\n    SUM(PLAN_QTY) AS PLAN_QTY,\r\n    SUM(RESULT_QTY) AS RESULT_QTY\r\nFROM \r\n    DAILY_PROD_SUMMARY\r\nWHERE \r\n\tDOMAIN_ID = :domain_id\r\n\t#if($fromDate)\r\n\tAND JOB_DATE >= :fromDate\r\n\t#end\r\n\t#if($toDate)\r\n\tAND JOB_DATE <= :toDate\r\n\t#end\r\n\t#if($area_cd)\r\n\tAND AREA_CD = :area_cd\r\n\t#end\r\n\t#if($stage_cd)\r\n\tAND STAGE_CD = :stage_cd\r\n\t#end\r\n\t#if($equip_type)\r\n\tAND EQUIP_TYPE = :equip_type\r\n\t#end\r\n\t#if($equip_cd)\r\n\tAND EQUIP_CD = :equip_cd\r\n\t#end\r\n\t#if($job_type)\r\n\tAND JOB_TYPE = :job_type\r\n\t#end\r\n\t#if($attr01)\r\n\tAND ATTR01 = :attr01\r\n\t#end\r\n\t#if($attr02)\r\n\tAND ATTR02 = :attr02\r\n\t#end\r\n\t#if($station_cd)\r\n\tAND STATION_CD = :station_cd\r\n\t#end\r\nGROUP BY\r\n    JOB_DATE\r\nORDER BY\r\n    JOB_DATE"
        },
        {
                "id": "650eba1c-ca1c-41b5-bcb0-a0860c6bc8f2",
                "name": "rtn-picked-by-location",
                "description": "반품 로케이션별 확정 수량",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT   proc.job_date,\r\n         reg.stage_cd,\r\n         proc.equip_type, \r\n         proc.equip_cd,\r\n         reg.rack_nm AS equip_nm, \r\n         proc.sub_equip_cd,\r\n         loc.ind_cd,\r\n         SUM(proc.pick_qty) AS pick_qty,\r\n         SUM(proc.picked_qty) AS picked_qty\r\nfrom\r\n    job_instances proc\r\n    inner join cells loc on proc.domain_id = loc.domain_id and proc.sub_equip_cd = loc.cell_cd\r\n    inner join racks reg on proc.domain_id = loc.domain_id and reg.rack_cd = loc.equip_cd\r\nwhere\r\n\tproc.domain_id = :domain_id\r\n\tand proc.job_type = 'RTN'\r\n\t#if($job_date)\r\n\tand proc.job_date = :job_date\r\n\t#else\r\n\tand proc.batch_id in (select id from job_batches where domain_id = :domain_id and job_type = 'RTN' and status = 'RUN')\r\n\t#end\r\n\t#if($rack_cd)\r\n\tand reg.rack_cd = :rack_cd\r\n\t#end\r\ngroup by proc.job_date, reg.stage_cd, proc.equip_type, proc.equip_cd, reg.rack_nm, proc.sub_equip_cd, loc.ind_cd\r\norder by proc.sub_equip_cd"
        },
        {
                "id": "4ad6f612-79d4-4668-a087-8195726a9b20",
                "name": "not_input_list",
                "description": "주문 및 작업 > 미투입 리스트",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\tBATCH_ID, REGION_CD, REGION_NM, JOB_DATE, JOB_BATCH_SEQ, DC_CD, COM_CD, \n\tSKU_CD, SKU_NM, BOX_IN_QTY, SUM(PICK_QTY) AS PICK_QTY, \n\tSUM(PICKING_QTY) AS PICKING_QTY, SUM(PICKED_QTY) AS PICKED_QTY, STATUS\nFROM\n\tTB_PROCESS\nWHERE\n\tDOMAIN_ID = :domain_id\n\t#if($job_date)\n\tAND JOB_DATE = :job_date\n\t#end\n\t#if($job_batch_seq)\n\tAND JOB_BATCH_SEQ = :job_batch_seq\n\t#end\n\t#if($dc_cd)\n\tAND DC_CD = :dc_cd\n\t#end\n\t#if($batch_id)\n\tAND BATCH_ID = :batch_id\n\t#end\n\t#if($region_cd)\n\tAND REGION_CD = :region_cd\n\t#end\n\t#if($sku_cd)\n\tAND SKU_CD LIKE '%' || :sku_cd || '%'\n\t#end\n\t#if($sku_nm)\n\tAND SKU_NM LIKE '%' || :sku_nm || '%'\n\t#end\n\t#if($cancel == 'true')\n\tAND STATUS = 'C'\n\t#elseif($cancel == 'false')\n\tAND STATUS = 'W'\n\t#else\n\tAND STATUS IN ('C', 'W')\n\t#end\nGROUP BY\n\tBATCH_ID, REGION_CD, REGION_NM, JOB_DATE, JOB_BATCH_SEQ, DC_CD, COM_CD, SKU_CD, SKU_NM, BOX_IN_QTY, STATUS\nORDER BY\n\tJOB_DATE, JOB_BATCH_SEQ, DC_CD, REGION_CD, COM_CD, SKU_CD ASC"
        },
        {
                "id": "4a77e9c7-4f1b-4ff2-b78d-b1d80119e89a",
                "name": "locations_by_vehicle",
                "description": "주문 및 작업 > 차량별 로케이션",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\tDISTINCT O.BATCH_ID, O.JOB_DATE, O.JOB_BATCH_SEQ, O.DC_CD, O.COM_CD, O.CUST_CD, O.CUST_NM,\n\tO.REGION_CD, P.REGION_NM, P.LOC_CD, O.VEHICLE_NO, O.PACK_TYPE\nFROM\n\tTB_IF_ORDER O \n\tINNER JOIN\n\tTB_PROCESS P\n\tON O.DOMAIN_ID = P.DOMAIN_ID AND O.BATCH_ID = P.BATCH_ID AND O.COM_CD = P.COM_CD AND O.CUST_CD = P.CUST_CD\nWHERE\n\tO.DOMAIN_ID = :domain_id\n\tAND O.JOB_DATE = :job_date\n\tAND O.JOB_BATCH_SEQ = :job_batch_seq\n\tAND O.DC_CD = :dc_cd\n\t#if($batch_id)\n\tAND O.BATCH_ID = :batch_id\n\t#end\t\n\t#if($region_cd)\n\tAND O.REGION_CD = :region_cd\n\t#end\n\t#if($loc_cd)\n\tAND P.LOC_CD like :loc_cd\n\t#end\t\n\t#if($cust_nm)\n\tAND O.CUST_NM like '%' || :cust_nm || '%'\n\t#end\n\t#if($vehicle_no)\n\tAND O.VEHICLE_NO like '%' || :vehicle_no || '%'\n\t#end\n\t#if($pack_type)\n\tAND O.PACK_TYPE = :pack_type\n\t#end\nORDER BY\n\tP.LOC_CD ASC"
        },
        {
                "id": "7AD57693E7C73D9FE0538B010A802F19",
                "name": "job-result-detail",
                "description": "주문 및 작업 > 박스 작업 내역 상세",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\ta.sku_cd,\n\ta.sku_nm,\n\ta.sku_barcd,\n\ta.plan_qty, \n\ta.actual_qty, \n\t(a.plan_qty - a.actual_qty) as left_qty\nFROM\n\t(SELECT\n\t\tp.sku_cd, \n\t\tp.sku_nm,\n\t\ts.sku_barcd,\n\t\tsum(p.pick_qty) as plan_qty, \n\t\tnvl(sum(p.real_picked_qty), 0) as actual_qty\n\tFROM\n\t\tTB_PROCESS p left outer join TB_SKU s on p.com_cd = s.com_cd and p.sku_cd = s.sku_cd\n\tWHERE\n\t\tp.domain_id = :domain_id\n\t\tand p.job_date = :job_date\n\t\tand p.job_batch_seq = :job_batch_seq\n\t\tand p.bucket_cd = :invoice_id\n\tGROUP BY\n\t\tp.sku_cd, p.sku_nm, s.sku_barcd\n\tORDER BY\n\t\tp.sku_cd) a\n"
        },
        {
                "id": "7AD57693E7C63D9FE0538B010A802F19",
                "name": "job-result",
                "description": "주문 및 작업 > 박스 작업 내역",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "select \n  distinct job_date, job_batch_seq, dc_cd, com_cd, cust_cd, cust_nm, box_id as invoice_id, box_sku_cnt as sku_qty, box_qty, status, to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') as created_at, sum(picked_qty) as actual_qty\nfrom (\n  SELECT\n    B.job_date,\n    B.job_batch_seq,\n    B.dc_cd,\n    B.com_cd,\n    B.cust_cd,\n    B.cust_nm,\n    B.box_id,\n    B.box_sku_cnt,\n    B.box_seq as box_qty,\n    B.status,\n    B.created_at,\n    D.picked_qty\n  FROM\n    TB_IF_BOX_RESULT B inner join TB_IF_BOX_DETAIL D\n    on B.id = D.box_result_id\n  WHERE\n    B.domain_id = :domain_id\n\t#if($dc_cd)\n\tand B.dc_cd = :dc_cd\n\t#end\n\t#if($com_cd)\n\tand B.com_cd = :com_cd\n\t#end  \n\t#if($job_date)\n\tand B.job_date = :job_date\n\t#end\t\n\t#if($job_batch_seq)\n\tand B.job_batch_seq = :job_batch_seq\n\t#end\t\n\t#if($cust_cd)\n\tand B.cust_cd = :cust_cd\n\t#end\n\t#if($box_id)\n\tand B.box_id = :box_id\n\t#end      \n)\ngroup by\n  job_date, job_batch_seq, dc_cd, com_cd, cust_cd, cust_nm, box_id, box_sku_cnt, box_qty, status, created_at\norder by\n  created_at desc"
        },
        {
                "id": "7AD57693E7C93D9FE0538B010A802F19",
                "name": "das-result-by-sku-summary",
                "description": "주문 및 작업 > DAS 상품 내역 > 서머리",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\tdc_cd, com_cd, cust_qty, plan_qty, actual_qty, (plan_qty - actual_qty) as left_qty\nFROM\n\t(SELECT\n\t\tdc_cd, com_cd, count(distinct(cust_cd)) as cust_qty, sum(pick_qty) as plan_qty, nvl(sum(real_picked_qty), 0) as actual_qty\n\tFROM\n\t\tTB_PROCESS\n\tWHERE\n\t\tdomain_id = :domain_id\n\t\tand job_type = 'DAS'\n\t\tand job_date = :job_date\n\t\tand job_batch_seq = :job_batch_seq\n\t\t#if($sku_cd)\n\t\t\tand sku_cd = :sku_cd\n\t\t#end\n\tGROUP BY\n\t\tdc_cd, com_cd)"
        },
        {
                "id": "7AD57693E7C83D9FE0538B010A802F19",
                "name": "das-result-by-sku-detail",
                "description": "주문 및 작업 > DAS 상품 내역 > 상세",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\t:job_date as job_date, \n\t:job_batch_seq as job_batch_seq, \n\ta.sku_cd, \n\ta.cust_cd,\n\ta.cust_nm,\n\ta.plan_qty, \n\ta.actual_qty, \n\t(a.plan_qty - a.actual_qty) as left_qty, \n\tdecode((a.plan_qty - a.actual_qty), 0, '작업완료', '작업중') as status\nFROM\n\t(SELECT\n\t\tsku_cd, cust_cd, cust_nm, sum(pick_qty) as plan_qty, nvl(sum(real_picked_qty), 0) as actual_qty\n\tFROM\n\t\tTB_PROCESS\n\tWHERE\n\t\tdomain_id = :domain_id\n\t\tand job_type = 'DAS'\n\t\tand job_date = :job_date\n\t\tand job_batch_seq = :job_batch_seq\n\t\tand com_cd = :com_cd\n\t\tand sku_cd = :sku_cd\n\tGROUP BY\n\t\tsku_cd, cust_cd, cust_nm\n\tORDER BY\n\t\tcust_cd) a"
        },
        {
                "id": "7AD57693E7C23D9FE0538B010A802F19",
                "name": "das-result-by-sku",
                "description": "주문 및 작업 > DAS 상품 내역",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\t:job_date as job_date,\n\t:job_batch_seq as job_batch_seq,\n\ta.com_cd,\n\ta.sku_cd,\n\ta.sku_nm,\n\ta.sku_barcd,\n\ta.cust_qty,\n\ta.plan_qty,\n\ta.actual_qty,\n\t(a.plan_qty - a.actual_qty) as left_qty,\n\tdecode((a.plan_qty - a.actual_qty), 0, :finished, :unfinished) as status\nFROM\n\t(SELECT\n\t\tcom_cd, sku_cd, sku_barcd, max(sku_nm) as sku_nm, count(distinct(cust_cd)) as cust_qty, sum(order_qty) as plan_qty, nvl(sum(picked_qty), 0) as actual_qty\n\tFROM\n\t\tTB_IF_ORDER\n\tWHERE\n\t\tdomain_id = :domain_id\n\t\t#if($com_cd)\n\t\tand com_cd = :com_cd\n\t\t#end\n\t\t#if($dc_cd)\n\t\tand dc_cd = :dc_cd\n\t\t#end\n\t\t#if($job_date)\n\t\tand job_date = :job_date\n\t\t#end\n\t\t#if($job_batch_seq)\n\t\tand job_batch_seq = :job_batch_seq\n\t\t#end\n\t\t#if($sku_cd)\n\t\tand sku_cd = :sku_cd\n\t\t#end\n\tGROUP BY\n\t\tcom_cd, sku_cd, sku_barcd, sku_nm\n\tORDER BY\n\t\tcom_cd, sku_cd) a"
        },
        {
                "id": "7AD57693E7C43D9FE0538B010A802F19",
                "name": "das-out-result-summary",
                "description": "주문 및 작업 > DAS 출고 내역 > 서머리",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\tdc_cd,\n\tcom_cd,\n\tcust_qty, \n\tsku_qty, \n\tplan_qty, \n\tactual_qty, \n\t(plan_qty - actual_qty) as left_qty, box_qty\nFROM\n\t(SELECT\n\t\tdc_cd,\n\t\tcom_cd,\n\t\tcount(distinct(cust_cd)) as cust_qty, \n\t\tcount(distinct(sku_cd)) as sku_qty, \n\t\tsum(pick_qty) as plan_qty, \n\t\tnvl(sum(real_picked_qty), 0) as actual_qty, \n\t\tnvl(count(distinct(box_result_id)), 0) as box_qty\n\tFROM\n\t\tTB_PROCESS\n\tWHERE\n\t\tdomain_id = :domain_id\n\t\tand job_type = 'DAS'\n\t\t#if($dc_cd)\n\t\tand dc_cd = :dc_cd\n\t\t#end\n\t\t#if($com_cd)\n\t\tand com_cd = :com_cd\n\t\t#end\t\t\n\t\tand job_date = :job_date\n\t\tand job_batch_seq = :job_batch_seq\n\t\t#if($region_cd)\n\t\tand region_cd = :region_cd\n\t\t#end\t\t\n\t\t#if($cust_cd)\n\t\tand cust_cd = :cust_cd\n\t\t#end\n\tGROUP BY\n\t\tdc_cd, com_cd)"
        },
        {
                "id": "7AD57693E7C53D9FE0538B010A802F19",
                "name": "das-out-result-box-sku-detail",
                "description": "주문 및 작업 > DAS 출고 내역 > 상세 > 상세",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "\tSELECT \n\t\tb.id,\n\t\tb.sku_cd,\n\t\tb.sku_nm,\n\t\ts.sku_barcd,\n\t\tb.pick_qty,\n\t\tb.picked_qty\n\tFROM\n\t\tTB_IF_BOX_DETAIL b\n\t\tleft outer join\n\t\tTB_SKU s\n\t\ton b.sku_cd = s.sku_cd\n\tWHERE\n\t\tBOX_RESULT_ID = :box_result_id\n\tORDER BY\n\t\tb.sku_cd asc"
        },
        {
                "id": "7AD57693E7CA3D9FE0538B010A802F19",
                "name": "das-out-result-box-detail",
                "description": "주문 및 작업 > DAS 출고 내역 > 상세",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "\tSELECT \n\t\tid as box_result_id,\n\t\tregion_cd,\n\t\tcust_cd, \n\t\tcust_nm,\n\t\tinvoice_id,\n\t\tbox_seq,\n\t\tpicked_qty as actual_qty,\n\t\tstatus\n\tFROM\n\t\tTB_IF_BOX_RESULT\n\tWHERE\n\t\tID in (\n\t\t\tSELECT\n\t\t\t\tbox_result_id\n\t\t\tFROM\n\t\t\t\tTB_PROCESS\n\t\t\tWHERE\n\t\t\t\tdomain_id = :domain_id\n\t\t\t\tand job_type = 'DAS'\n\t\t\t\tand job_date = :job_date\n\t\t\t\tand job_batch_seq = :job_batch_seq\n\t\t\t\tand cust_cd = :cust_cd\n\t\t\t)\n\tORDER BY\n\t\tbox_seq desc"
        },
        {
                "id": "7AD57693E7C33D9FE0538B010A802F19",
                "name": "das-out-result",
                "description": "주문 및 작업 > DAS 출고 내역",
                "category": "SCREEN",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "SELECT\n\t:job_date as job_date,\n\t:job_batch_seq as job_batch_seq,\n\ta.dc_cd,\n\ta.com_cd,\n\ta.cust_cd,\n\ta.cust_nm,\n\ta.cust_qty,\n\ta.sku_qty,\n\ta.plan_qty,\n\ta.actual_qty,\n\ta.box_qty,\n\t(a.plan_qty - a.actual_qty) as left_qty,\n\tdecode((a.plan_qty - a.actual_qty), 0, :finished, :unfinished) as status\nFROM\n\t(SELECT\n\t\tdc_cd,\n\t\tcom_cd,\n\t\tcust_cd,\n\t\tcust_nm,\n\t\tcount(distinct(cust_cd)) as cust_qty,\n\t\tcount(distinct(sku_cd)) as sku_qty,\n\t\tsum(pick_qty) as plan_qty,\n\t\tnvl(sum(real_picked_qty), 0) as actual_qty,\n\t\tcount(distinct(box_result_id)) as box_qty\n\tFROM\n\t\tTB_PROCESS\n\tWHERE\n\t\tdomain_id = :domain_id\n\t\t#if($com_cd)\n\t\tand com_cd = :com_cd\n\t\t#end\n\t\t#if($dc_cd)\n\t\tand dc_cd = :dc_cd\n\t\t#end\t\n\t\tand job_type = 'DAS'\n\t\tand job_date = :job_date\n\t\tand job_batch_seq = :job_batch_seq\n\t\t#if($cust_cd)\n\t\tand cust_cd = :cust_cd\n\t\t#end\n\tGROUP BY\n\t\tdc_cd, com_cd, cust_cd, cust_nm\n\tORDER BY\n\t\tdc_cd, com_cd, cust_cd) a"
        },
        {
                "id": "7bb55d8f-9511-4fa1-8173-0702123dd9a0",
                "name": "search-pick-result-if",
                "description": "피킹 확정 실적 조회",
                "category": "SERVICE",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "select\n\t*\nfrom\n\ttb_if_pick_rslt_mps_r@wms\nwhere\n\tcenter_cd = 'DT'\n\tand eqp_id = 'DM03'\n\t#if($gi_ymd)\n\tand gi_ymd = replace(:gi_ymd, '-', '')\n\t#else\n\tand gi_ymd = to_char(sysdate, 'YYYYMMDD')\n\t#end\n\t#if($wav_no)\n\tand wav_no = :wav_no\n\t#end\n\t#if($btch_seq)\n\tand btch_seq = :btch_seq\n\t#end\t\n\t#if($bizptnr_cd)\n\tand bizptnr_cd = :bizptnr_cd\n\t#end\n\t#if($box_id)\n\tand box_id = :box_id\n\t#end\n\t#if($cst_cd)\n\tand cst_cd = :cst_cd\n\t#end\n\t#if($sku_cd)\n\tand sku_cd = :sku_cd\n\t#end\n    #if($if_txn_type_fl == 'true')\n    and if_txn_type_fl = 'Y'\n    #elseif($if_txn_type_fl == 'false')\n    and if_txn_type_fl = 'N'\n    #end\norder by\n\tif_no desc"
        },
        {
                "id": "68d37608-e165-452b-8ed0-59aaf2432541",
                "name": "search-box-if-result",
                "description": "박스 전송 실적 조회",
                "category": "SERVICE",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "select\n\t*\nfrom\n\ttb_if_box_rslt_mps_r@wms\nwhere\n\tcenter_cd = 'DT'\n\tand eqp_id = 'DM03'\n\t#if($gi_ymd)\n\tand gi_ymd = replace(:gi_ymd, '-', '')\n\t#else\n\tand gi_ymd = to_char(sysdate, 'YYYYMMDD')\n\t#end\n\t#if($wav_no)\n\tand wav_no = :wav_no\n\t#end\n\t#if($btch_seq)\n\tand btch_seq = :btch_seq\n\t#end\t\n\t#if($bizptnr_cd)\n\tand bizptnr_cd = :bizptnr_cd\n\t#end\n\t#if($box_id)\n\tand box_id = :box_id\n\t#end\n\t#if($cst_cd)\n\tand cst_cd = :cst_cd\n\t#end\n\t#if($sku_cd)\n\tand sku_cd = :sku_cd\n\t#end\n\t#if($attribute03)\n\tand attribute03 = :attribute03\n\t#end\n    #if($if_txn_type_fl == 'true')\n    and if_txn_type_fl = 'Y'\n    #elseif($if_txn_type_fl == 'false')\n    and if_txn_type_fl = 'N'\n    #end\norder by\n\tupd_dt desc"
        },
        {
                "id": "b5bbe154-7fbf-4651-9450-ada582d4a6fb",
                "name": "print-box-label",
                "description": "박스 라벨 인쇄",
                "category": "SERVICE",
                "langType": "groovy",
                "scriptType": "DSL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "import com.cj.mps3.entity.Printer;\nimport com.cj.mps3.entity.JobOrder;\nimport com.cj.mps3.entity.BoxResult;\nimport xyz.elidom.dev.entity.DiyTemplate;\nimport com.cj.mps3.rest.PrinterController;\nimport xyz.elidom.dev.rest.DiyServiceController;\nimport xyz.elidom.dev.rest.DiyTemplateController;\nimport xyz.elidom.sys.SysConstants;\nimport xyz.elidom.sys.util.ValueUtil;\nimport xyz.elidom.util.BeanUtil;\n\ndef printBarcodeLabel(long domainId, Printer printer, int printCount, int printPage, BoxResult box, List<JobOrder> orders, int totalEaCount) {\n\tif(printer != null) {\n\t\tString command = generateCommand(printPage, box, orders, totalEaCount);\n\t\t\n\t\tif(command != null) {\n\t\t\tprintCount = (printCount > 0) ? printCount : 1;\n\t\t\tPrinterController printerCtrl = BeanUtil.get(PrinterController.class);\n\t\t\n\t\t\tfor(int i = 0 ; i < printCount ; i++) {\n\t\t\t\tprinterCtrl.printLabelByLabelCommand(printer.getPrinterAgentUrl(), printer.getPrinterDriver(), command);\n\t\t\t}\n\t\t}\n\t}\n}\n\ndef generateCommand(int printPage, BoxResult box, List<JobOrder> orders, int totalEaCount) {\n\tDiyTemplateController diyTemplateCtrl = BeanUtil.get(DiyTemplateController.class);\n\tDiyTemplate template = BeanUtil.get(DiyTemplateController.class).findOne(SysConstants.SHOW_BY_NAME_METHOD, 'DAS_INVOICE_LABEL');\n\t\n\tif(template != null) {\n\t\ttemplate = diyTemplateCtrl.dynamicTemplate(template.getId(), ValueUtil.newMap(\"box,orders,printPage,totalEaCount\", box, orders, printPage, totalEaCount));\n\t\treturn template.getTemplate();\n\t} else {\n\t\treturn null;\n\t}\n}\n\ndef domainId = box.getDomainId();\nqueryDsl.init('com.cj.mps3.entity.JobOrder');\n\ndef sql = \"\"\"\n\tselect \n\t\ta.vehicle_no, a.alloc_no, a.pass_stop_nm, a.pack_type, a.order_id, a.sku_barcd, a.sku_nm, picked_qty \n\tfrom \n\t\t(select \n\t\t\tvehicle_no, alloc_no, pass_stop_nm, pack_type, order_id, sku_cd as sku_barcd, sku_nm\n\t\tfrom \n\t\t\ttb_if_order \n\t\twhere\n\t\t\tdomain_id = ${domainId}\n\t\t\tand batch_id = '${box.getBatchId()}'\n\t\tgroup by\n\t\t\tvehicle_no, alloc_no, pass_stop_nm, pack_type, order_id, sku_cd, sku_nm\n\t\t) a\n\t\t\n\t\tinner join\n\t\t\n\t\t(\n\t\tselect\n\t\t\torder_id,\n\t\t\tsku_cd as sku_barcd,\n\t\t\tsum(picked_qty) as picked_qty\n\t\tfrom\n\t\t\ttb_if_box_detail\n\t\twhere\n\t\t\tdomain_id = ${domainId}\n\t\t\tand box_result_id = '${box.getId()}'\n\t\tgroup by\n\t\t\torder_id, sku_cd\n\t\t) b\n\t\ton a.order_id = b.order_id and a.sku_barcd = b.sku_barcd\n\t \n\torder by a.sku_nm asc\n\"\"\"\n\ndef orders = queryDsl.selectSql(sql, 0, 0);\ndef orderSlices = [];\ndef printPage = 0;\nint totalEaCount = 0;\n\norders.eachWithIndex { o, i ->\n\ttotalEaCount += o['picked_qty'];\n}\n\norders.eachWithIndex { o, i ->\n\torderSlices.add(o);\n\n\tif(orderSlices.size() >= 10) {\n\t\tprintPage = printPage + 1;\n\t\tprintBarcodeLabel(domainId, printer, printCount, printPage, box, orderSlices, totalEaCount);\n\t\torderSlices.clear();\n\t}\n}\n\nif(orderSlices.size() > 0) {\n\tprintPage = printPage + 1;\n\tprintBarcodeLabel(domainId, printer, printCount, printPage, box, orderSlices, totalEaCount);\n\torderSlices.clear();\n}\n\nreturn true;"
        },
        {
                "id": "0dd360af-c4df-48a4-990a-c5c04e068717",
                "name": "qps-one-sku-exem-stock-needs",
                "description": "QPS 배치 oneSKU 제외한 재고 리스트",
                "category": "SYSTEM",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "select need.batch_id, need.sku_cd,need.sku_barcd,need.sku_nm,need.stock_qty,need.pick_qty,need.picked_qty,need.need_stock_qty,\r\n    case when onesku.order_qty is null  then 0 else onesku.order_qty end as order_qty,\r\n     case when onesku.order_qty is null  then need.need_stock_qty-0 else need.need_stock_qty-onesku.order_qty end as one_sku_need\r\n     from (\r\n        select \r\n            job_batch_seq, batch_id,  sku_cd, sku_barcd, sku_nm, stock_qty, pick_qty, picked_qty, \r\n            case when (order_qty - pick_qty - stock_qty) < 0 then 0 else order_qty - pick_qty - stock_qty end as need_stock_qty \r\n        from (\r\n            select \r\n                a.job_batch_seq, a.batch_id, a.sku_cd,a.sku_barcd, a.sku_nm, a.order_qty, \r\n                COALESCE(b.stock_qty,0) as stock_qty, \r\n                COALESCE(c.pick_qty,0) as pick_qty, \r\n                COALESCE(c.picked_qty,0) as picked_qty\r\n            from \r\n                (select\r\n                    job_batch_seq, batch_id,  ts.sku_cd, ts.sku_barcd,ts.sku_nm, COALESCE(sum(pick_qty), 0) as order_qty\r\n                from\r\n                    tb_interface, tb_sku ts\r\n                where\r\n                    domain_id = 99\r\n                    and batch_id = (select id from tb_job_batch where status = 'RUN')\r\n                    and job_type in ('DPS', 'QPS')\r\n                    and region_cd != '05'\r\n                    and ts.sku_cd = tb_interface.sku_cd\r\n                    and ts.com_cd = tb_interface.com_cd\r\n                group by\r\n                    job_batch_seq, batch_id,  ts.sku_cd, ts.sku_barcd, ts.sku_nm) a\r\n                    \r\n                left outer join \r\n                \r\n                (select  sku_cd, stock_qty from (\r\n                    select\r\n                        sku_cd, COALESCE(sum(load_qty), 0) as stock_qty\r\n                    from\r\n                        tb_stock\r\n                    where \r\n                        region_cd in (select region_cd from tb_region where job_type in ('DPS', 'QPS') and region_type <> '05')\r\n                    group by\r\n                        sku_cd\r\n                ) where\r\n                    stock_qty > 0) b\r\n                    \r\n                on a.sku_cd = b.sku_cd\r\n                \r\n                left outer join\r\n                \r\n                (select\r\n                    job_batch_seq, batch_id,  ts.sku_cd, ts.sku_nm, \r\n                    COALESCE(sum(pick_qty), 0) as pick_qty, \r\n                    COALESCE(sum(real_picked_qty), 0) as picked_qty\r\n                from\r\n                    tb_process p, tb_sku ts\r\n                where\r\n                    domain_id = 99\r\n                    and batch_id = (select id from tb_job_batch where status = 'RUN')\r\n                    and job_type in ('DPS', 'QPS')\r\n                    and region_cd != '05'\r\n                    and ts.sku_cd = p.sku_cd\r\n                    and ts.com_cd = p.com_cd\r\n                    \r\n                group by\r\n                    job_batch_seq, batch_id,  ts.sku_cd, ts.sku_nm) c\r\n                    \r\n                on a.sku_cd = c.sku_cd\r\n        )\r\n    ) need\r\n    left outer join\r\n    (\r\n        select os.sku_cd sku_cd, os.order_qty order_qty,os.status\r\n            from tb_qps_one_sku_order os \r\n        where os.status <>'END'\r\n    ) onesku\r\n    on need.sku_cd = onesku.sku_cd\r\n    \r\n     order by \r\n        need.need_stock_qty desc"
        },
        {
                "id": "ec10871c-8b4b-4f23-ba1d-0ebf4a8a8462",
                "name": "stock-needs",
                "description": "DPS 배치 실행을 위한 필요 재고 리스트",
                "category": "SYSTEM",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "select stock.* from (\n\tselect \n\t    s.equip_type, s.equip_cd, s.sku_cd, s.sku_nm, s.order_qty, s.alloc_qty, s.picked_qty, s.stock_qty, \n\t    case when (s.order_qty - s.alloc_qty - s.stock_qty) < 0 then 0 else s.order_qty - s.alloc_qty - s.stock_qty end as need_stock_qty \n\tfrom (\n\t    select \n\t        a.equip_type, a.equip_cd, a.sku_cd, a.sku_nm, \n\t        c.order_qty,\n\t        COALESCE(a.pick_qty, 0) as alloc_qty,\n\t        COALESCE(a.picked_qty, 0) as picked_qty,\n\t        COALESCE(b.stock_qty, 0) as stock_qty\n\t    from\n\t        (select\n\t            j.equip_type, j.equip_cd, j.sku_cd, j.sku_nm, \n\t            COALESCE(sum(j.pick_qty), 0) as pick_qty, \n\t            COALESCE(sum(j.picked_qty), 0) as picked_qty\n\t        from\n\t            job_instances j inner join job_batches b on j.batch_id = b.id\n\t        where\n\t            j.domain_id = :domain_id\n\t            and b.job_type = 'DPS'\n\t            and b.status = 'RUN'\n\t            and j.order_type = 'MT'\n\t\t        #if($equip_type)\n\t\t        and j.equip_type = :equip_type\n\t\t        #end\n\t\t        #if($equip_cd)\n\t\t        and j.equip_cd = :equip_cd\n\t\t        #end\n\t\t        #if($sku_cd)\n\t\t        and j.sku_cd like '%'||:sku_cd||'%'\n\t\t        #end\n\t        group by\n\t            j.equip_type, j.equip_cd, j.sku_cd, j.sku_nm) a\n\n\t        left outer join \n\t        \n\t        (select i.equip_type, i.equip_cd, i.sku_cd, i.stock_qty from (\n\t            select\n\t                 equip_type, equip_cd, sku_cd, sum(load_qty) as stock_qty\n\t            from\n\t                stocks\n\t            where \n\t                domain_id = :domain_id\n\t\t\t        #if($equip_type)\n\t\t\t        and equip_type = :equip_type\n\t\t\t        #end\n\t\t\t        #if($equip_cd)\n\t\t\t        and equip_cd = :equip_cd\n\t\t\t        #end\n\t\t\t        #if($sku_cd)\n\t\t\t        and sku_cd like '%'||:sku_cd||'%'\n\t\t\t        #end\n\t            group by\n\t                equip_type, equip_cd, sku_cd\n\t        ) i \n\t        where\n\t          i.stock_qty > 0) b\n\t            \n\t        on a.equip_type = b.equip_type and a.equip_cd = b.equip_cd and a.sku_cd = b.sku_cd\n\n\t\t\tleft outer join\n\n\t        (select\n\t            j.equip_type, o.sku_cd, o.sku_nm, sum(o.order_qty) as order_qty\n\t        from\n\t\t\t\tjob_batches j inner join orders o on j.id = o.batch_id\n\t        where\n\t            j.domain_id = :domain_id\n\t\t\t\tand j.job_type = 'DPS'\n\t\t\t\tand j.status = 'RUN'\n\t\t\t\tand o.order_type = 'MT'\n\t\t        #if($equip_type)\n\t\t        and o.equip_type = :equip_type\n\t\t        #end\n\t\t        #if($sku_cd)\n\t\t        and o.sku_cd like '%'||:sku_cd||'%'\n\t\t        #end\n\t        group by\n\t            j.equip_type, o.sku_cd, o.sku_nm) c\n\t            \t            \n\t        on a.equip_type = c.equip_type and a.sku_cd = c.sku_cd\n\t) s\n) stock\norder by \n\tstock.equip_type, stock.equip_cd, stock.need_stock_qty desc, stock.order_qty desc, stock.sku_cd"
        },
        {
                "id": "62eee193-bdf4-4e6a-8159-c870100fa9c2",
                "name": "search-for-sku-barcode",
                "description": "주문 및 작업 > 작업 현황 > 상품 바코드 조회",
                "category": "SYSTEM",
                "langType": "groovy",
                "scriptType": "SQL",
                "activeFlag": false,
                "atomicFlag": false,
                "serviceLogic": "select \n\tsku_barcd, sku_nm\nfrom\n\ttb_sku\nwhere\n\t#if($com_cd)\n\tcom_cd = :com_cd and\n\t#end\n\tsku_cd = :sku_cd"
        }
]